import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Read CSV and clean columns
df = pd.read_csv(r'C:\Users\Looter\Downloads\30secbratan.csv')
df.columns = df.columns.str.strip()
df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'])

# Filter the data
last_day = df['DateTime'].max().date()
first_day = last_day - pd.Timedelta(days=252)
df = df[df['DateTime'].dt.date >= first_day]

# DataFrames for opening 30 seconds and first 30 minutes
df_30sec = df[(df['DateTime'].dt.time >= pd.Timestamp('09:00:00').time()) & (df['DateTime'].dt.time <= pd.Timestamp('09:00:29').time())]
df_30min = df[(df['DateTime'].dt.time >= pd.Timestamp('09:00:00').time()) & (df['DateTime'].dt.time <= pd.Timestamp('09:30:00').time())]

# Populate stats with correct indentation
stats = []
for name, group in grouped:
    df_day_30sec = df_30sec[df_30sec['DateTime'].dt.date == name]
    if not df_day_30sec.empty:
        opening_bar = df_day_30sec[df_day_30sec['DateTime'].dt.time == pd.Timestamp('09:00:00').time()]
        if not opening_bar.empty:
            opening_range = abs(opening_bar['High'].iloc[0] - opening_bar['Low'].iloc[0])
            opening_volume = opening_bar['Volume'].iloc[0]
        else:
            opening_range = 0
            opening_volume = 0
    else:
        opening_range = 0
        opening_volume = 0
        
    first_30min_range = group['High'].max() - group['Low'].min()
    ratio = first_30min_range / opening_range if opening_range != 0 else 0
    opening_multiple = first_30min_range / opening_range if opening_range != 0 else 0
    
    stats.append({
        'Date': pd.Timestamp(name),
        'Opening_Range': opening_range,
        'First_30min_Range': first_30min_range,
        'Opening_Volume': opening_volume,
        'Ratio': ratio,
        'Opening_Multiple': opening_multiple
    })

# Create DataFrame from stats and check columns
df_stats = pd.DataFrame(stats)
print(df_stats.columns)

# Remaining code


# Standardize features
scaler = StandardScaler()
features_for_clustering = ['Opening_Range', 'First_30min_Range', 'Opening_Volume', 'Ratio', 'Opening_Multiple']
x = df_stats.loc[:, features_for_clustering].values
x = scaler.fit_transform(x)

# KMeans clustering
kmeans = KMeans(n_clusters=4)
kmeans.fit(x)
df_stats['Cluster'] = kmeans.labels_

# Print cluster means
print("Cluster means:")
print(df_stats.groupby('Cluster').mean(numeric_only=True))

# Plot histograms
sns.histplot(df_stats['Opening_Multiple'], bins=30)
plt.title('Distribution of Opening Range Multiple')
plt.show()

sns.histplot(df_stats['First_30min_Range'], bins=30)
plt.title('Distribution of 30-Minute Range')
plt.show()

# Scatter plots
for feature1, feature2 in [('Opening_Range', 'First_30min_Range'), ('Opening_Range', 'Ratio'), ('Opening_Range', 'Opening_Volume'), ('First_30min_Range', 'Ratio'), ('First_30min_Range', 'Opening_Volume')]:
    plt.scatter(df_stats[feature1], df_stats[feature2], c=df_stats['Cluster'], cmap='viridis')
    plt.xlabel(feature1)
    plt.ylabel(feature2)
    plt.title(f'{feature1} vs {feature2}')
    plt.colorbar().set_label('Cluster')
    plt.show()
# Calculate mean for each cluster
cluster_means = df_stats.groupby('Cluster').mean()[['Percent_of_Day_Range', 'Opening_Multiple']]

print("Mean values for each cluster:")
print(cluster_means)

# Continue with your existing code for plotting
plt.figure(figsize=(10, 6))
scatter = plt.scatter(df_stats['Opening_Multiple'], df_stats['Percent_of_Day_Range'], c=df_stats['Cluster'], cmap='viridis')
plt.title('Percentage of Daily Range Covered by 30-Minute Range vs Opening Multiple')
plt.xlabel('Opening Multiple')
plt.ylabel('Percent of Daily Range')

# Annotate the plot with the mean values
for cluster, row in cluster_means.iterrows():
    plt.annotate(f"Mean: {row['Percent_of_Day_Range']:.2f}, {row['Opening_Multiple']:.2f}",
                 (row['Opening_Multiple'], row['Percent_of_Day_Range']),
                 textcoords="offset points",
                 xytext=(0,10),
                 ha='center')

cbar = plt.colorbar(scatter)
cbar.set_label('Cluster')
plt.show()

# Calculate mean and standard deviation for each cluster
cluster_stats = df_stats.groupby('Cluster').agg({
    'First_30min_Range': ['mean', 'std'],
    'Opening_Multiple': ['mean', 'std'],
    'Opening_Range': ['mean', 'std']
})

# Rename columns for better readability
cluster_stats.columns = ['_'.join(col).strip() for col in cluster_stats.columns.values]

# Print the calculated mean and standard deviation for each cluster
print("Mean and Standard Deviation for each Cluster:")
print(cluster_stats)
